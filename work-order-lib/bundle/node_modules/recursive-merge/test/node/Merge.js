// Generated by CoffeeScript 1.6.3
(function() {
  var expect, merge;

  expect = require('chai').expect;

  merge = require('../../lib/Merge');

  describe('Merge', function() {
    it('should throw error if objects are not of the same type', function() {
      return expect(function() {
        return merge([], {});
      }).to["throw"](Error, 'Can not merge [object Array] with [object Object].');
    });
    it('should throw error if objects are not arrays or objects', function() {
      expect(function() {
        return merge('', '');
      }).to["throw"](Error, 'Can not merge scalar objects.');
      expect(function() {
        return merge(1, 1);
      }).to["throw"](Error, 'Can not merge scalar objects.');
      return expect(function() {
        return merge(true, true);
      }).to["throw"](Error, 'Can not merge scalar objects.');
    });
    it('should return merged simple arrays', function() {
      return expect(merge([1, 1, 2, 3], [3, 4, 4, 5], [10, 9, 8, 1])).to.be.eql([1, 1, 2, 3, 3, 4, 4, 5, 10, 9, 8, 1]);
    });
    it('should return merged advanced arrays', function() {
      return expect(merge([[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]])).to.be.eql([[1, 2, 3, 7, 8, 9], [4, 5, 6, 10, 11, 12]]);
    });
    it('should return merged more than two arrays', function() {
      return expect(merge([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12])).to.be.eql([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);
    });
    it('should return merged arrays with objects', function() {
      return expect(merge([
        {
          one: 1,
          two: 2,
          three: 3
        }
      ], [
        {
          four: 4,
          five: 5,
          six: 6
        }
      ], [7, 8, 9], [10, 11, 12])).to.be.eql([
        {
          one: 1,
          two: 2,
          three: 3,
          four: 4,
          five: 5,
          six: 6
        }, 7, 8, 9, 10, 11, 12
      ]);
    });
    it('should return merged simple objects', function() {
      return expect(merge({
        hello: 'world'
      }, {
        world: 'hello'
      })).to.be.eql({
        hello: 'world',
        world: 'hello'
      });
    });
    it('should return merged advanced objects', function() {
      return expect(merge({
        one: {
          two: 2,
          three: 3
        },
        four: {
          five: 5,
          six: 6
        }
      }, {
        seven: {
          eight: 8,
          nine: 9
        },
        one: {
          ten: 10,
          eleven: 11
        }
      })).to.be.eql({
        one: {
          two: 2,
          three: 3,
          ten: 10,
          eleven: 11
        },
        four: {
          five: 5,
          six: 6
        },
        seven: {
          eight: 8,
          nine: 9
        }
      });
    });
    it('should return merged more than two objects', function() {
      return expect(merge({
        one: 1
      }, {
        two: 2
      }, {
        three: 3
      }, {
        four: 4
      })).to.be.eql({
        one: 1,
        two: 2,
        three: 3,
        four: 4
      });
    });
    return it('should return merged objects with arrays', function() {
      return expect(merge({
        one: [1]
      }, {
        two: [2]
      }, {
        three: [3]
      }, {
        four: [4]
      })).to.be.eql({
        one: [1],
        two: [2],
        three: [3],
        four: [4]
      });
    });
  });

}).call(this);
