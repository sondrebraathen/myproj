<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
    <artifactId>work-order-lib-all</artifactId>
    <groupId>com.example</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>

	<groupId>com.example</groupId>
	<artifactId>work-order-lib</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>bundle</packaging>

	<name>Work Order</name>
	<description>The Work Order library.</description>
	
	<properties>
		<!-- Comma separated Bundle Dependencies with version.  -->
		<rx-sdk.bundleDependencies>standardlib;${rx-sdk.version},com.bmc.arsys.rx.approval;${rx-sdk.version},com.bmc.arsys.rx.foundation;${rx-sdk.version},com.bmc.arsys.rx.assignment;${rx-sdk.version}</rx-sdk.bundleDependencies>
	</properties>

	<dependencies>

		<!-- Framework Dependencies -->
		<dependency>
			<groupId>${rx-sdk.groupId}</groupId>
			<artifactId>com.bmc.arsys.rx.standardlib</artifactId>
			<version>${rx-sdk.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>${rx-sdk.groupId}</groupId>
			<artifactId>com.bmc.arsys.rx.services</artifactId>
			<version>${rx-sdk.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>${rx-sdk.groupId}</groupId>
			<artifactId>com.bmc.arsys.rx.application</artifactId>
			<version>${rx-sdk.version}</version>
			<scope>provided</scope>
		</dependency>	

		<!-- Bundle Specific Dependencies -->
		<dependency>
			<groupId>org.eclipse</groupId>
			<artifactId>osgi</artifactId>
			<version>${equinox.framework.version}</version>
			<scope>provided</scope>
		</dependency>
        <dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.0.1</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- Reference App Deployment Dependencies -->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-common</artifactId>
			<version>${jersey.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-client</artifactId>
			<version>${jersey.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
			<version>${jersey.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jsonSchema</artifactId>
			<version>${jackson.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- for compiling with aspects -->
		<dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
            <scope>provided</scope>
        </dependency>
		<!-- Needed in support of @RxTransactional -->
		<dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring.version}</version>
            <scope>provided</scope>
        </dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
			<scope>provided</scope>
		</dependency>

		<!--  For validating action parameters and custom fields -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>${javax.validation.api.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${hibernate-validator.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Dependencies for Unit Test -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>${testng.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>${joda-time.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${rx-sdk.bundleId}-${project.version}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>grunt-build</id>
						<phase>generate-sources</phase>
						<configuration>
							<target>
								<condition property="npm.root.module.isWindows">
									<os family="windows" />
								</condition>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="maven.plugin.classpath" />
								<echo>NPM INSTALL</echo>
								<!-- Make sure the npm node-module folder exists and create a soft 
									link for unix based systems or copy for windows. -->
								<if>
									<isset property="npm.root.module.dir" />
									<then>
										<mkdir dir="${npm.root.module.dir}/${project.name}/node_modules" />
										<if>
											<isset property="npm.root.module.isWindows" />
											<then>
												<echo message="Copying the node_modules from share folder." />
												<copy todir="${basedir}/node_modules" failonerror="false">
													<fileset dir="${npm.root.module.dir}/${project.name}/node_modules" />
												</copy>
											</then>
											<else>
												<echo message="Creating the Symbolic Link to the shared node_modules folder." />
												<symlink link="${basedir}/node_modules" resource="${npm.root.module.dir}/${project.name}/node_modules" overwrite="true" />
											</else>
										</if>
									</then>
								</if>
								<exec executable="cmd" dir="${project.basedir}" osfamily="windows" failonerror="true">
									<arg line="/c npm config set color false" />
								</exec>
								<exec executable="npm" dir="${project.basedir}" osfamily="unix" failonerror="true">
									<arg line="config set color false" />
								</exec>
								<exec executable="cmd" dir="${project.basedir}" osfamily="windows" failonerror="true">
									<arg line="/c npm install" />
								</exec>
								<exec executable="npm" dir="${project.basedir}" osfamily="unix" failonerror="true">
									<arg line="install" />
								</exec>

								<!-- If required make sure the backup node-module is updated -->
								<!-- We only allow this on a Windows based system -->
								<if>
									<and>
										<isset property="npm.root.module.isWindows" />
										<isset property="npm.root.module.dir" />
									</and>
									<then>
										<echo message="Copying the node_modules to the share folder" />
										<mkdir dir="${npm.root.module.dir}/${project.name}/node_modules" />
										<copy todir="${npm.root.module.dir}/${project.name}/node_modules" failonerror="false">
											<fileset dir="${basedir}/node_modules" />
										</copy>
									</then>
								</if>

								<echo>Executing GRUNT</echo>
								<exec executable="cmd" dir="${project.basedir}" osfamily="windows" resultproperty="cmdresult" output="grunt.status">
									<arg line="/c grunt release --no-color" />
								</exec>
								<exec executable="grunt" dir="${project.basedir}" osfamily="unix" resultproperty="cmdresult" output="grunt.status">
									<arg line="release --no-color" />
								</exec>
								<loadfile property="grunt.status" srcFile="${project.basedir}${file.separator}grunt.status" />
								<echo>${grunt.status}</echo>
								<delete file="${project.basedir}${file.separator}grunt.status" quiet="true" />
								<condition property="cmdsuccess">
									<equals arg1="${cmdresult}" arg2="0" />
								</condition>

								<!-- Make sure we remove the soft link so deletion does not take 
									out the original backup -->
								<!-- We only allow this on a Unix based system -->
								<if>
									<and>
										<not>
											<isset property="npm.root.module.isWindows" />
										</not>
										<isset property="npm.root.module.dir" />
									</and>
									<then>
										<echo message="Removing the Symbolic Link to the shared node_modules folder." />
										<symlink action="delete" link="${basedir}/node_modules" failonerror="false" />
									</then>
								</if>

								<fail unless="cmdsuccess" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.7</version>
                <configuration>
                    <showWeaveInfo>false</showWeaveInfo>
                    <source>${javac.version}</source>
                    <target>${javac.version}</target>
                    <Xlint>ignore</Xlint>
                    <complianceLevel>${javac.version}</complianceLevel>
                    <verbose>false</verbose>
                    <aspectLibraries>
						<aspectLibrary>
                            <groupId>${rx-sdk.groupId}</groupId>
                            <artifactId>com.bmc.arsys.rx.services</artifactId>
                        </aspectLibrary>
						<aspectLibrary>
                            <groupId>${rx-sdk.groupId}</groupId>
                            <artifactId>com.bmc.arsys.rx.application</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
				<dependencies>
					<dependency>
					    <groupId>org.aspectj</groupId>
					    <artifactId>aspectjtools</artifactId>
					    <version>${aspectj.version}</version>
					</dependency>
			   </dependencies>
            </plugin>

			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>${maven-bundle-plugin.version}</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<Bundle-Name>${rx-sdk.bundleName}</Bundle-Name>
						<Bundle-SymbolicName>${rx-sdk.bundleId}</Bundle-SymbolicName>
						<Bundle-Activator>com.example.bundle.MyLibrary</Bundle-Activator>
						<Import-Package>*;resolution:=optional</Import-Package>
						<Embed-Dependency>*;scope=compile|runtime</Embed-Dependency>
						<Bundle-Description>${rx-sdk.bundleDescription}</Bundle-Description>
						<Bundle-Vendor>${rx-sdk.bundleDeveloperId}</Bundle-Vendor>
						<RxBundle-DeveloperName>${rx-sdk.bundleDeveloperName}</RxBundle-DeveloperName>
						<RxBundle-FriendlyName>${rx-sdk.bundleFriendlyName}</RxBundle-FriendlyName>
						<RxBundle-IsApplication>${rx-sdk.bundleIsApplication}</RxBundle-IsApplication>
						<RxBundle-Dependencies>${rx-sdk.bundleDependencies}</RxBundle-Dependencies>
					</instructions>
				</configuration>
			</plugin>

			<!-- Need to compile with -parameters option to get parameter names through reflection API. 
				These parameter names are used while exposing @Action within the bundle.-->
			 <plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>${javac.version}</source>
					<target>${javac.version}</target>
					<compilerArgs>
            			<arg>-parameters</arg>
         			 </compilerArgs>
        		</configuration>
      		</plugin>

			<!-- copy dependent libraries into lib directory for reference app deployer -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<resources>
			<resource>
				<directory>${project.build.directory}/web-build</directory>
			</resource>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
